{"version":3,"sources":["database lazy /^/.*/.json$/ groupOptions: {} namespace object","components/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","SwipeConfig","delta","preventDefaultTouchmoveEvent","trackTouch","trackMouse","rotationAngle","Index","props","useState","loadedOnce","error","words","config","setConfig","loading","setLoading","currentWord","showMeaning","alignLeft","alignRight","cardConfig","setCardConfig","useEffect","loadData","pickRandomWord","source","Dictionary","result","default","catch","err","length","randomWord","Math","floor","random","expandWord","preventDefault","stopPropagation","condenseWord","handlers","useSwipeable","onSwiped","eventData","handleSwipe","onTap","toggleWord","data","dir","updateCard","moveCardRight","setTimeout","moveCardLeft","className","word","definition","App","Helmet","charSet","rel","href","name","content","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"gIAAA,IAAIA,EAAM,CACT,mBAAoB,CACnB,GACA,GAED,mBAAoB,CACnB,GACA,GAED,oBAAqB,CACpB,GACA,GAED,mCAAoC,CACnC,GACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,MAGnCX,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,GACzBI,EAAOC,QAAUhB,G,uHChCXiB,EAAc,CAChBC,MAAO,GACPC,8BAA8B,EAC9BC,YAAY,EACZC,YAAY,EACZC,cAAe,GAIJ,SAASC,EAAMC,GAC1B,MAA6BC,mBAAS,CAClCC,YAAY,EACZC,OAAO,EACPC,MAAO,KAHX,mBAAOC,EAAP,KAAeC,EAAf,KAKA,EAAgCL,oBAAS,GAAzC,mBAAQM,EAAR,KAAiBC,EAAjB,KACA,EAAsCP,mBAAS,CAC3CQ,YAAa,KACbC,aAAa,EACbC,WAAW,EACXC,YAAY,IAJhB,mBAAQC,EAAR,KAAoBC,EAApB,KAQAC,qBAAU,WACFV,EAAOH,YAEPc,MAGL,CAACX,EAAOH,aAGXa,qBAAU,WACNE,MACD,CAACZ,EAAOD,QAEX,IAAMY,EAAW,WAAyB,IAAxBE,EAAuB,uDAAhB,YACrB,MAAO,YAAeA,EAAtB,UACCpC,MAAK,SAAEqC,GACN,IAAIC,EAASD,EAAWE,QAAX,MAEXf,EADmB,qBAAXc,EACE,2BAAKf,GAAN,IAAcF,OAAO,IAGpB,2BAAKE,GAAN,IAAcD,MAAOgB,EAAQlB,YAAY,EAAMC,OAAO,QAGlEmB,OAAM,SAAAC,GACLjB,EAAU,2BAAKD,GAAN,IAAcF,OAAO,SAI9Bc,EAAiB,WACnB,IAAQb,EAAUC,EAAVD,MACFoB,EAASpB,EAAMoB,OACfC,EAAarB,EAAMsB,KAAKC,MAAMD,KAAKE,SAASJ,IAClDV,EAAc,2BAAKD,GAAN,IAAkBJ,YAAagB,EAAYf,aAAa,EAAOC,WAAW,EAAOC,YAAY,KAC1GJ,GAAW,IAGTqB,EAAa,SAAC9C,GACbA,IACCA,EAAE+C,iBACF/C,EAAEgD,mBAENjB,EAAc,2BAAKD,GAAN,IAAkBH,aAAa,MAE1CsB,EAAe,SAACjD,GACfA,IACCA,EAAE+C,iBACF/C,EAAEgD,mBAENjB,EAAc,2BAAKD,GAAN,IAAkBH,aAAa,MAG1CuB,EAAWC,uBAAa,yBAC1BC,SAAU,SAACC,GAAeC,EAAYD,KACnC3C,GAFsB,IAGzB6C,MAAO,WAAOC,QAGZF,EAAc,SAACG,GACjB,OAAOA,EAAKC,KACR,IAAK,QACDC,IACA,MAEJ,IAAK,KACL,IAAK,OACDb,IACA,MAEJ,IAAK,OACDG,IACA,MAEJ,QACI,SAINO,EAAa,WACZ1B,EAAWH,YACVsB,IAEAH,KAGFa,EAAa,WACfC,IACAC,YAAW,kBAAMC,MAAgB,MAG/BA,EAAe,WACjB/B,EAAc,2BAAKD,GAAN,IAAkBF,WAAW,EAAMC,YAAY,EAAOF,aAAa,KAChFkC,YAAW,kBAAK3B,MAAkB,MAEhC0B,EAAgB,WAClB7B,EAAc,2BAAKD,GAAN,IAAkBF,WAAW,EAAOC,YAAY,MAajE,GAAGL,EACC,OACI,0CAIR,IAAQE,EAAoDI,EAApDJ,YAAaC,EAAuCG,EAAvCH,YAAaC,EAA0BE,EAA1BF,UAAWC,EAAeC,EAAfD,WAE7C,OACI,6CAAKkC,UAAU,gBAAmBb,GAAlC,aAEOxB,GACA,sBACKqC,UAAS,6CACPpC,EAAc,SAAW,GADlB,kCAEPC,EAAY,YAAc,GAFnB,iCAGPC,EAAa,aAAe,GAHrB,0BADd,UASK,qBAAKkC,UAAU,QAAf,SAAwBrC,EAAYsC,OACpC,qBAAKD,UAAS,UAAd,SAA4BrC,EAAYuC,mB,WC7I7CC,MAdf,WACE,OACE,sBAAKH,UAAU,MAAf,UACG,eAACI,EAAA,EAAD,WACK,sBAAMC,QAAQ,UACd,0EACA,sBAAMC,IAAI,YAAYC,KAAK,8BAC3B,sBAAMC,KAAK,cAAcC,QAAQ,mCAEvC,cAACxD,EAAD,QCAAyD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAO1D,GAC9B2D,UAAUC,cACPC,SAASH,GACTjF,MAAK,SAACqF,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEtE,GAAUA,EAAOuE,UACnBvE,EAAOuE,SAAST,KAMlBO,QAAQC,IAAI,sCAGRtE,GAAUA,EAAOwE,WACnBxE,EAAOwE,UAAUV,WAO5B7C,OAAM,SAACnB,GACNuE,QAAQvE,MAAM,4CAA6CA,MC9FjE,IAYe2E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlG,MAAK,YAAkD,IAA/CmG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkBrF,GACvB,GAA6C,kBAAmB2D,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,WAAwBlC,OAAOC,SAASN,MACpDwC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM6B,WAAN,sBAEPpC,IAgEV,SAAiCO,EAAO1D,GAEtC0F,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5BlH,MAAK,SAACmH,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CrC,UAAUC,cAAcqC,MAAMxH,MAAK,SAACqF,GAClCA,EAAaoC,aAAazH,MAAK,WAC7B4E,OAAOC,SAAS6C,eAKpB1C,EAAgBC,EAAO1D,MAG1BiB,OAAM,WACLoD,QAAQC,IAAI,oEAtFV8B,CAAwB1C,EAAO1D,GAI/B2D,UAAUC,cAAcqC,MAAMxH,MAAK,WACjC4F,QAAQC,IACN,+GAMJb,EAAgBC,EAAO1D,OE/B/BqG,GAKA5B,M","file":"static/js/main.ebe9ada8.chunk.js","sourcesContent":["var map = {\n\t\"./baron-334.json\": [\n\t\t23,\n\t\t4\n\t],\n\t\"./baron-753.json\": [\n\t\t24,\n\t\t5\n\t],\n\t\"./qitao-1787.json\": [\n\t\t25,\n\t\t6\n\t],\n\t\"./vocabularydotcom-top-1000.json\": [\n\t\t26,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 18;\nmodule.exports = webpackAsyncContext;","import { useEffect, useState } from 'react';\r\nimport './index.scss';\r\nimport { useSwipeable } from 'react-swipeable';\r\n\r\nconst SwipeConfig = {\r\n    delta: 10,                            // min distance(px) before a swipe starts\r\n    preventDefaultTouchmoveEvent: true,  // call e.preventDefault *See Details*\r\n    trackTouch: true,                     // track touch input\r\n    trackMouse: true,                    // track mouse input\r\n    rotationAngle: 0,                     // set a rotation angle\r\n    //enableMouseEvents: true\r\n  }\r\n\r\nexport default function Index(props) {\r\n    const [config, setConfig ] = useState({\r\n        loadedOnce: false,\r\n        error: false,\r\n        words: [],\r\n    })\r\n    const [ loading, setLoading ] = useState(true);\r\n    const [ cardConfig, setCardConfig ] = useState({\r\n        currentWord: null,\r\n        showMeaning: false,\r\n        alignLeft: false,\r\n        alignRight: false,\r\n    })\r\n    \r\n//to fetch a new source\r\n    useEffect(() => {\r\n        if(!config.loadedOnce) {\r\n            //fetch words from database\r\n            loadData();\r\n        }\r\n        \r\n    }, [config.loadedOnce]);\r\n\r\n//to generate a random word\r\n    useEffect(() => {\r\n        pickRandomWord();\r\n    }, [config.words]);\r\n\r\n    const loadData = (source=\"baron-334\") => {\r\n        import(`../database/${source}.json`)\r\n        .then(( Dictionary ) => {\r\n          let result = Dictionary.default[\"words\"];\r\n          if(typeof result === 'undefined'){\r\n            setConfig({ ...config, error: true });\r\n          }\r\n          else {\r\n            setConfig({ ...config, words: result, loadedOnce: true, error: false });\r\n          } \r\n        })\r\n        .catch(err => {\r\n          setConfig({ ...config, error: true });\r\n        });\r\n    }\r\n\r\n    const pickRandomWord = () => {\r\n        const { words } = config;\r\n        const length = words.length;\r\n        const randomWord = words[Math.floor(Math.random()*length)];\r\n        setCardConfig({ ...cardConfig, currentWord: randomWord, showMeaning: false, alignLeft: false, alignRight: false });\r\n        setLoading(false);\r\n    }\r\n\r\n    const expandWord = (e) => {\r\n        if(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n        setCardConfig({ ...cardConfig, showMeaning: true });\r\n    }\r\n    const condenseWord = (e) => {\r\n        if(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n        setCardConfig({ ...cardConfig, showMeaning: false });\r\n    }\r\n\r\n    const handlers = useSwipeable({\r\n        onSwiped: (eventData) => {handleSwipe(eventData)},\r\n        ...SwipeConfig,\r\n        onTap: () => {toggleWord();}\r\n    });\r\n\r\n    const handleSwipe = (data) => {\r\n        switch(data.dir) {\r\n            case 'Right' : {\r\n                updateCard();\r\n                break;\r\n            }\r\n            case 'Up':\r\n            case 'Left': {\r\n                expandWord();\r\n                break;\r\n            }\r\n            case 'Down': {\r\n                condenseWord();\r\n                break;\r\n            }\r\n            default: \r\n                return;\r\n        }\r\n    }\r\n\r\n    const toggleWord = () => {\r\n        if(cardConfig.showMeaning)\r\n            condenseWord();\r\n        else\r\n            expandWord();\r\n    }\r\n\r\n    const updateCard = () => {\r\n        moveCardRight();\r\n        setTimeout(() => moveCardLeft(), 100); \r\n    }\r\n\r\n    const moveCardLeft = () => {\r\n        setCardConfig({ ...cardConfig, alignLeft: true, alignRight: false, showMeaning: false });\r\n        setTimeout(() =>pickRandomWord(), 200);\r\n    }\r\n    const moveCardRight = () => {\r\n        setCardConfig({ ...cardConfig, alignLeft: false, alignRight: true });\r\n    }\r\n\r\n    const resetCardStatus = () => {\r\n        setCardConfig({\r\n            ...cardConfig,\r\n            alignLeft: false,\r\n            alignRight: false,\r\n        });\r\n    }\r\n    \r\n\r\n\r\n    if(loading) {\r\n        return (\r\n            <div>Loading</div>\r\n        )\r\n    }\r\n\r\n    const { currentWord, showMeaning, alignLeft, alignRight } = cardConfig;\r\n\r\n    return (\r\n        <div className=\"appContainer\" {...handlers}>\r\n           {\r\n               currentWord &&\r\n               <div\r\n                    className={`wordContainer\r\n                    ${showMeaning ? 'expand' : ''} \r\n                    ${alignLeft ? 'alignLeft' : ''}\r\n                    ${alignRight ? 'alignRight' : ''}\r\n                    `}\r\n                    //onContextMenu={(e)=>{expandWord(e)}}\r\n                    //onClick={expandWord}\r\n                >\r\n                    <div className=\"title\">{currentWord.word}</div>\r\n                    <div className={`meaning`}>{currentWord.definition}</div>\r\n               </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import Index from './components';\nimport { Helmet } from 'react-helmet';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Helmet>\n            <meta charSet=\"utf-8\" />\n            <title>Wordsta - Learn words with flashcards</title>\n            <link rel=\"canonical\" href=\"http://fvrtrp.com/wordsta\" />\n            <meta name=\"description\" content=\"Vocabulary app by Fevertrip\" />\n        </Helmet>\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}